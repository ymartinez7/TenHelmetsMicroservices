// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _10Helmets.API.Infrastructure.Data.Context;

namespace _10Helmets.API.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191115143958_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("_10Helmets.API.Core.Entities.ActionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ActionTypes");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Accomplish");

                    b.Property<int>("ActivityTypeId");

                    b.Property<int?>("ActivityTypeId1");

                    b.Property<int>("AlertTypeId");

                    b.Property<int?>("AlertTypeId1");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("EmployeeId");

                    b.Property<int?>("EmployeeId1");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ProjectId");

                    b.Property<int>("ProviderId");

                    b.Property<int?>("ProviderId1");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("StatusId");

                    b.Property<int?>("StatusId1");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("ActivityTypeId1");

                    b.HasIndex("AlertTypeId");

                    b.HasIndex("AlertTypeId1");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("ProviderId1");

                    b.HasIndex("StatusId");

                    b.HasIndex("StatusId1");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.ActivityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ActivityTypes");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Alert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId");

                    b.Property<int?>("ActivityId1");

                    b.Property<int>("AlertTypeId");

                    b.Property<int?>("AlertTypeId1");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Critical");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<int>("ProjectBudgetId");

                    b.Property<int?>("ProjectBudgetId1");

                    b.Property<int>("RequestId");

                    b.Property<string>("Warning");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ActivityId1");

                    b.HasIndex("AlertTypeId");

                    b.HasIndex("AlertTypeId1");

                    b.HasIndex("ProjectBudgetId");

                    b.HasIndex("ProjectBudgetId1");

                    b.HasIndex("RequestId");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.AlertType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("AlertTypes");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<int>("PaymentTypeId");

                    b.Property<int?>("PaymentTypeId1");

                    b.Property<int>("ProjectId");

                    b.Property<int?>("ProjectId1");

                    b.Property<int?>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("PaymentTypeId1");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectId1");

                    b.HasIndex("StatusId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Cal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionTypeId");

                    b.Property<int>("ActivityId");

                    b.Property<string>("Analysis");

                    b.Property<DateTime>("CorrectionDate");

                    b.Property<string>("CorrectionResult");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<DateTime>("DetectionDate");

                    b.Property<int>("EmployeeId");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<int>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StatusId");

                    b.ToTable("Cals");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactEmployeeFirstName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ContactEmployeeLastName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Rif")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("SectorId");

                    b.Property<string>("TaxAddress")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("SectorId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("DocumentTypeId");

                    b.Property<int?>("DocumentTypeId1");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("FirstSureName")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<string>("MiddleName");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("RolId");

                    b.Property<int?>("RolId1");

                    b.Property<string>("SecondSureName");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("DocumentTypeId1");

                    b.HasIndex("RolId");

                    b.HasIndex("RolId1");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Espense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<int>("EmployeeId");

                    b.Property<int?>("EmployeeId1");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("EspenseTypeId");

                    b.Property<int?>("EspenseTypeId1");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<int?>("ProjectId");

                    b.Property<bool>("Reimbursement");

                    b.Property<decimal>("ReimbursementAmount");

                    b.Property<DateTime>("ReimbursementDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("StatusId");

                    b.Property<int?>("StatusId1");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("EspenseTypeId");

                    b.HasIndex("EspenseTypeId1");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StatusId1");

                    b.ToTable("Espenses");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.EspenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("EspenseTypes");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.EventLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("EventLogTypeId");

                    b.Property<int?>("EventLogTypeId1");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.HasKey("Id");

                    b.HasIndex("EventLogTypeId");

                    b.HasIndex("EventLogTypeId1");

                    b.ToTable("EventLogs");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.EventLogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("EventLogTypes");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("ServiceOrderId");

                    b.Property<int?>("ServiceOrderId1");

                    b.Property<int>("Size");

                    b.HasKey("Id");

                    b.HasIndex("ServiceOrderId");

                    b.HasIndex("ServiceOrderId1");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Inspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId");

                    b.Property<int?>("ActivityId1");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<int>("InspectionTypeId");

                    b.Property<int?>("InspectionTypeId1");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ActivityId1");

                    b.HasIndex("InspectionTypeId");

                    b.HasIndex("InspectionTypeId1");

                    b.ToTable("Inspections");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.InspectionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("InspectionTypes");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Capacity");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Measure");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("ResourceId");

                    b.Property<int?>("ResourceId1");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.HasIndex("ResourceId1");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId");

                    b.Property<int?>("ActivityId1");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ActivityId1");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlertTypeId");

                    b.Property<int?>("AlertTypeId1");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<int>("MaxTM");

                    b.Property<int>("MinTM");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AlertTypeId");

                    b.HasIndex("AlertTypeId1");

                    b.ToTable("Priotities");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<int>("ServiceOrderId");

                    b.Property<int?>("ServiceOrderId1");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("StatusId");

                    b.Property<int?>("StatusId1");

                    b.HasKey("Id");

                    b.HasIndex("ServiceOrderId");

                    b.HasIndex("ServiceOrderId1");

                    b.HasIndex("StatusId");

                    b.HasIndex("StatusId1");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.ProjectBudget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("ApprovalDate");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("EmployeeId");

                    b.Property<int?>("EmployeeId1");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<int>("ProjectId");

                    b.Property<int?>("ProjectId1");

                    b.Property<int>("UnitId");

                    b.Property<int?>("UnitId1");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectId1");

                    b.HasIndex("UnitId");

                    b.HasIndex("UnitId1");

                    b.ToTable("ProjectBudgets");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LocalNumber");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Rif")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("SectorId");

                    b.Property<int?>("SectorId1");

                    b.Property<string>("TaxAddress")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("SectorId");

                    b.HasIndex("SectorId1");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("DeliveryDate");

                    b.Property<int>("EmployeeId");

                    b.Property<int?>("EmployeeId1");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<int>("PaymentTypeId");

                    b.Property<int?>("PaymentTypeId1");

                    b.Property<int>("ProviderId");

                    b.Property<int?>("ProviderId1");

                    b.Property<int>("RequestId");

                    b.Property<decimal>("TotalAmount");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("PaymentTypeId1");

                    b.HasIndex("ProviderId");

                    b.HasIndex("ProviderId1");

                    b.HasIndex("RequestId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.PurchaseDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Item")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<int>("PurchaseId");

                    b.Property<int?>("PurchaseId1");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("UnitPrice");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("PurchaseId1");

                    b.ToTable("PurchaseDetails");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Accomplish");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("EmployeeId");

                    b.Property<int?>("EmployeeId1");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<int>("PriorityId");

                    b.Property<int?>("PriorityId1");

                    b.Property<int>("ProjectId");

                    b.Property<int?>("ProjectId1");

                    b.Property<int>("RequestTypeId");

                    b.Property<int?>("RequestTypeId1");

                    b.Property<DateTime>("RequiredDate");

                    b.Property<int>("StatusId");

                    b.Property<int?>("StatusId1");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("PriorityId");

                    b.HasIndex("PriorityId1");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectId1");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("RequestTypeId1");

                    b.HasIndex("StatusId");

                    b.HasIndex("StatusId1");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.RequestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("UnitId");

                    b.Property<int?>("UnitId1");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.HasIndex("UnitId1");

                    b.ToTable("RequestTypes");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId");

                    b.Property<int?>("BrandId1");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Quantity");

                    b.Property<int>("ResourceTypeId");

                    b.Property<int?>("ResourceTypeId1");

                    b.Property<string>("SerialNumber");

                    b.Property<string>("State");

                    b.Property<decimal>("UnitaryPrice");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("BrandId1");

                    b.HasIndex("ResourceTypeId");

                    b.HasIndex("ResourceTypeId1");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.ResourceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<int>("Quantity");

                    b.Property<int?>("RequestId");

                    b.Property<int>("RequestsId");

                    b.Property<int>("ResourceId");

                    b.Property<int?>("ResourceId1");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("RequestsId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("ResourceId1");

                    b.ToTable("ResourceRequests");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.ResourceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ResourceTypes");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<string>("Name");

                    b.Property<int>("UnitId");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<int?>("CustomerId1");

                    b.Property<int>("EmployeeId");

                    b.Property<int?>("EmployeeId1");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<int>("PaymentTypeId");

                    b.Property<int?>("PaymentTypeId1");

                    b.Property<decimal>("TotalAmount");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("PaymentTypeId1");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.SaleDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<int>("ModelId");

                    b.Property<int?>("ModelId1");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<int>("Quantity");

                    b.Property<int>("ResourceId");

                    b.Property<int?>("ResourceId1");

                    b.Property<int>("SaleId");

                    b.Property<int?>("SaleId1");

                    b.Property<decimal>("UnitPrice");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("ModelId1");

                    b.HasIndex("ResourceId");

                    b.HasIndex("ResourceId1");

                    b.HasIndex("SaleId");

                    b.HasIndex("SaleId1");

                    b.ToTable("SaleDetails");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.ServiceOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<int?>("CustomerId1");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<DateTime>("ReceptionDate");

                    b.Property<int>("UnitId");

                    b.Property<int?>("UnitId1");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("UnitId");

                    b.HasIndex("UnitId1");

                    b.ToTable("ServiceOrders");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<int?>("ProjectId");

                    b.Property<string>("Qualification");

                    b.Property<float>("Score");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModificatedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int?>("OrganizationId1");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationId1");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Activity", b =>
                {
                    b.HasOne("_10Helmets.API.Core.Entities.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("_10Helmets.API.Core.Entities.ActivityType")
                        .WithMany("Activity")
                        .HasForeignKey("ActivityTypeId1");

                    b.HasOne("_10Helmets.API.Core.Entities.AlertType", "AlertType")
                        .WithMany()
                        .HasForeignKey("AlertTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.AlertType")
                        .WithMany("Activities")
                        .HasForeignKey("AlertTypeId1");

                    b.HasOne("_10Helmets.API.Core.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Employee")
                        .WithMany("Activities")
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("_10Helmets.API.Core.Entities.Project")
                        .WithMany("Activities")
                        .HasForeignKey("ProjectId");

                    b.HasOne("_10Helmets.API.Core.Entities.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Provider")
                        .WithMany("Actiities")
                        .HasForeignKey("ProviderId1");

                    b.HasOne("_10Helmets.API.Core.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Status")
                        .WithMany("Activities")
                        .HasForeignKey("StatusId1");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Alert", b =>
                {
                    b.HasOne("_10Helmets.API.Core.Entities.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Activity")
                        .WithMany("Alerts")
                        .HasForeignKey("ActivityId1");

                    b.HasOne("_10Helmets.API.Core.Entities.AlertType", "AlertType")
                        .WithMany()
                        .HasForeignKey("AlertTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.AlertType")
                        .WithMany("Alerts")
                        .HasForeignKey("AlertTypeId1");

                    b.HasOne("_10Helmets.API.Core.Entities.ProjectBudget", "ProjectBudget")
                        .WithMany()
                        .HasForeignKey("ProjectBudgetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.ProjectBudget")
                        .WithMany("Alerts")
                        .HasForeignKey("ProjectBudgetId1");

                    b.HasOne("_10Helmets.API.Core.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Bill", b =>
                {
                    b.HasOne("_10Helmets.API.Core.Entities.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.PaymentType")
                        .WithMany("Bills")
                        .HasForeignKey("PaymentTypeId1");

                    b.HasOne("_10Helmets.API.Core.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Project")
                        .WithMany("Bills")
                        .HasForeignKey("ProjectId1");

                    b.HasOne("_10Helmets.API.Core.Entities.Status")
                        .WithMany("Bills")
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Cal", b =>
                {
                    b.HasOne("_10Helmets.API.Core.Entities.ActionType", "ActionType")
                        .WithMany("Cals")
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("_10Helmets.API.Core.Entities.Activity", "Activity")
                        .WithMany("Cals")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("_10Helmets.API.Core.Entities.Employee", "Employee")
                        .WithMany("Cals")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("_10Helmets.API.Core.Entities.Status", "Status")
                        .WithMany("Cals")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Customer", b =>
                {
                    b.HasOne("_10Helmets.API.Core.Entities.Sector", "Sector")
                        .WithMany("Customers")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Employee", b =>
                {
                    b.HasOne("_10Helmets.API.Core.Entities.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.DocumentType")
                        .WithMany("Employees")
                        .HasForeignKey("DocumentTypeId1");

                    b.HasOne("_10Helmets.API.Core.Entities.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Rol")
                        .WithMany("Employees")
                        .HasForeignKey("RolId1");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Espense", b =>
                {
                    b.HasOne("_10Helmets.API.Core.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Employee")
                        .WithMany("Espenses")
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("_10Helmets.API.Core.Entities.EspenseType", "EspenseType")
                        .WithMany()
                        .HasForeignKey("EspenseTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.EspenseType")
                        .WithMany("Espenses")
                        .HasForeignKey("EspenseTypeId1");

                    b.HasOne("_10Helmets.API.Core.Entities.Project")
                        .WithMany("Espenses")
                        .HasForeignKey("ProjectId");

                    b.HasOne("_10Helmets.API.Core.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Status")
                        .WithMany("Espenses")
                        .HasForeignKey("StatusId1");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.EventLog", b =>
                {
                    b.HasOne("_10Helmets.API.Core.Entities.EventLogType", "EventLogType")
                        .WithMany()
                        .HasForeignKey("EventLogTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.EventLogType")
                        .WithMany("EventLogs")
                        .HasForeignKey("EventLogTypeId1");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.File", b =>
                {
                    b.HasOne("_10Helmets.API.Core.Entities.ServiceOrder", "ServiceOrder")
                        .WithMany()
                        .HasForeignKey("ServiceOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.ServiceOrder")
                        .WithMany("Files")
                        .HasForeignKey("ServiceOrderId1");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Inspection", b =>
                {
                    b.HasOne("_10Helmets.API.Core.Entities.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Activity")
                        .WithMany("Inspections")
                        .HasForeignKey("ActivityId1");

                    b.HasOne("_10Helmets.API.Core.Entities.InspectionType", "InspectionType")
                        .WithMany()
                        .HasForeignKey("InspectionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.InspectionType")
                        .WithMany("Inspections")
                        .HasForeignKey("InspectionTypeId1");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Model", b =>
                {
                    b.HasOne("_10Helmets.API.Core.Entities.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Resource")
                        .WithMany("Models")
                        .HasForeignKey("ResourceId1");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Note", b =>
                {
                    b.HasOne("_10Helmets.API.Core.Entities.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Activity")
                        .WithMany("Notes")
                        .HasForeignKey("ActivityId1");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Priority", b =>
                {
                    b.HasOne("_10Helmets.API.Core.Entities.AlertType", "AlertType")
                        .WithMany()
                        .HasForeignKey("AlertTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.AlertType")
                        .WithMany("Priorities")
                        .HasForeignKey("AlertTypeId1");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Project", b =>
                {
                    b.HasOne("_10Helmets.API.Core.Entities.ServiceOrder", "ServiceOrder")
                        .WithMany()
                        .HasForeignKey("ServiceOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.ServiceOrder")
                        .WithMany("Projects")
                        .HasForeignKey("ServiceOrderId1");

                    b.HasOne("_10Helmets.API.Core.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Status")
                        .WithMany("Projects")
                        .HasForeignKey("StatusId1");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.ProjectBudget", b =>
                {
                    b.HasOne("_10Helmets.API.Core.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Employee")
                        .WithMany("ProjectBudgets")
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("_10Helmets.API.Core.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Project")
                        .WithMany("ProjectBudgets")
                        .HasForeignKey("ProjectId1");

                    b.HasOne("_10Helmets.API.Core.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Unit")
                        .WithMany("ProjectBudgets")
                        .HasForeignKey("UnitId1");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Provider", b =>
                {
                    b.HasOne("_10Helmets.API.Core.Entities.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Sector")
                        .WithMany("Providers")
                        .HasForeignKey("SectorId1");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Purchase", b =>
                {
                    b.HasOne("_10Helmets.API.Core.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Employee")
                        .WithMany("Purchases")
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("_10Helmets.API.Core.Entities.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.PaymentType")
                        .WithMany("Purchases")
                        .HasForeignKey("PaymentTypeId1");

                    b.HasOne("_10Helmets.API.Core.Entities.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Provider")
                        .WithMany("Purchases")
                        .HasForeignKey("ProviderId1");

                    b.HasOne("_10Helmets.API.Core.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.PurchaseDetail", b =>
                {
                    b.HasOne("_10Helmets.API.Core.Entities.Purchase", "Purchase")
                        .WithMany()
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Purchase")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("PurchaseId1");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Request", b =>
                {
                    b.HasOne("_10Helmets.API.Core.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Employee")
                        .WithMany("Requests")
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("_10Helmets.API.Core.Entities.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Priority")
                        .WithMany("Requests")
                        .HasForeignKey("PriorityId1");

                    b.HasOne("_10Helmets.API.Core.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Project")
                        .WithMany("Requests")
                        .HasForeignKey("ProjectId1");

                    b.HasOne("_10Helmets.API.Core.Entities.RequestType", "RequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.RequestType")
                        .WithMany("Requests")
                        .HasForeignKey("RequestTypeId1");

                    b.HasOne("_10Helmets.API.Core.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Status")
                        .WithMany("Requests")
                        .HasForeignKey("StatusId1");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.RequestType", b =>
                {
                    b.HasOne("_10Helmets.API.Core.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Unit")
                        .WithMany("RequestTypes")
                        .HasForeignKey("UnitId1");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Resource", b =>
                {
                    b.HasOne("_10Helmets.API.Core.Entities.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Brand")
                        .WithMany("Resources")
                        .HasForeignKey("BrandId1");

                    b.HasOne("_10Helmets.API.Core.Entities.ResourceType", "ResourceType")
                        .WithMany()
                        .HasForeignKey("ResourceTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.ResourceType")
                        .WithMany("Resources")
                        .HasForeignKey("ResourceTypeId1");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.ResourceRequest", b =>
                {
                    b.HasOne("_10Helmets.API.Core.Entities.Request")
                        .WithMany("ResourceRequests")
                        .HasForeignKey("RequestId");

                    b.HasOne("_10Helmets.API.Core.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Resource")
                        .WithMany("ResourceRequests")
                        .HasForeignKey("ResourceId1");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Rol", b =>
                {
                    b.HasOne("_10Helmets.API.Core.Entities.Unit", "Unit")
                        .WithMany("Roles")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Sale", b =>
                {
                    b.HasOne("_10Helmets.API.Core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("_10Helmets.API.Core.Entities.Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId1");

                    b.HasOne("_10Helmets.API.Core.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("_10Helmets.API.Core.Entities.Employee")
                        .WithMany("Sales")
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("_10Helmets.API.Core.Entities.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("_10Helmets.API.Core.Entities.PaymentType")
                        .WithMany("Sales")
                        .HasForeignKey("PaymentTypeId1");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.SaleDetail", b =>
                {
                    b.HasOne("_10Helmets.API.Core.Entities.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Model")
                        .WithMany("SaleDetails")
                        .HasForeignKey("ModelId1");

                    b.HasOne("_10Helmets.API.Core.Entities.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Resource")
                        .WithMany("SaleDetails")
                        .HasForeignKey("ResourceId1");

                    b.HasOne("_10Helmets.API.Core.Entities.Sale", "Sale")
                        .WithMany()
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Sale")
                        .WithMany("SaleDetails")
                        .HasForeignKey("SaleId1");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.ServiceOrder", b =>
                {
                    b.HasOne("_10Helmets.API.Core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Customer")
                        .WithMany("ServiceOrders")
                        .HasForeignKey("CustomerId1");

                    b.HasOne("_10Helmets.API.Core.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Unit")
                        .WithMany("ServiceOrders")
                        .HasForeignKey("UnitId1");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Survey", b =>
                {
                    b.HasOne("_10Helmets.API.Core.Entities.Customer", "Customer")
                        .WithMany("Surveys")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("_10Helmets.API.Core.Entities.Project")
                        .WithMany("Surveys")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("_10Helmets.API.Core.Entities.Unit", b =>
                {
                    b.HasOne("_10Helmets.API.Core.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_10Helmets.API.Core.Entities.Organization")
                        .WithMany("Units")
                        .HasForeignKey("OrganizationId1");
                });
#pragma warning restore 612, 618
        }
    }
}
